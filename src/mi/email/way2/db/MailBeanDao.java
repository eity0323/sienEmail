package mi.email.way2.db;

import mi.email.way2.model.MailBean;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MAIL_BEAN.
*/
public class MailBeanDao extends AbstractDao<MailBean, Long> {

    public static final String TABLENAME = "MAIL_BEAN";

    /**
     * Properties of entity MailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property Subject = new Property(2, String.class, "subject", false, "SUBJECT");
        public final static Property From = new Property(3, String.class, "from", false, "FROM");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property ToAddress = new Property(5, String.class, "toAddress", false, "TO_ADDRESS");
        public final static Property CcAddress = new Property(6, String.class, "ccAddress", false, "CC_ADDRESS");
        public final static Property BccAddress = new Property(7, String.class, "bccAddress", false, "BCC_ADDRESS");
        public final static Property ReplySign = new Property(8, Boolean.class, "replySign", false, "REPLY_SIGN");
        public final static Property ContainAttach = new Property(9, Boolean.class, "containAttach", false, "CONTAIN_ATTACH");
    };


    public MailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MAIL_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE_ID' TEXT," + // 1: messageId
                "'SUBJECT' TEXT," + // 2: subject
                "'FROM' TEXT," + // 3: from
                "'CONTENT' TEXT," + // 4: content
                "'TO_ADDRESS' TEXT," + // 5: toAddress
                "'CC_ADDRESS' TEXT," + // 6: ccAddress
                "'BCC_ADDRESS' TEXT," + // 7: bccAddress
                "'REPLY_SIGN' INTEGER," + // 8: replySign
                "'CONTAIN_ATTACH' INTEGER);"); // 9: containAttach
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MAIL_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MailBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(3, subject);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(4, from);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(6, toAddress);
        }
 
        String ccAddress = entity.getCcAddress();
        if (ccAddress != null) {
            stmt.bindString(7, ccAddress);
        }
 
        String bccAddress = entity.getBccAddress();
        if (bccAddress != null) {
            stmt.bindString(8, bccAddress);
        }
 
        Boolean replySign = entity.getReplySign();
        if (replySign != null) {
            stmt.bindLong(9, replySign ? 1l: 0l);
        }
 
        Boolean containAttach = entity.getContainAttach();
        if (containAttach != null) {
            stmt.bindLong(10, containAttach ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MailBean readEntity(Cursor cursor, int offset) {
        MailBean entity = new MailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subject
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // from
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // toAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ccAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bccAddress
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // replySign
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // containAttach
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MailBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFrom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCcAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBccAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReplySign(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setContainAttach(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MailBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MailBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
